{"version":3,"file":"Layout.js","sourceRoot":"","sources":["../../../../src/lib/uni-virtualizer/lib/layouts/Layout.ts"],"names":[],"mappings":"","sourcesContent":["export type dimension = 'height' | 'width';\nexport type Size = {\n  [key in dimension]: number\n};\n\nexport type Margins = {\n  marginTop: number,\n  marginRight: number,\n  marginBottom: number,\n  marginLeft: number\n};\n\nexport type ItemBox = Size | (Size & Margins);\n\nexport type position = 'left' | 'top';\nexport type Positions = {\n  left: number,\n  top: number,\n  width?: number,\n  height?: number\n};\n\n\nexport type LayoutConstructor = new(config?: object) => Layout;\n\nexport interface LayoutSpecifier {\n  type: LayoutConstructor\n}\n\nexport type LayoutSpecifierFactory = (config?: object) => LayoutSpecifier;\n\n\nexport type ScrollDirection = 'vertical' | 'horizontal';\n\n/**\n * Interface for layouts consumed by VirtualScroller or VirtualRepeater.\n */\n export interface Layout {\n  config?: object;\n   \n  totalItems: number;\n\n  direction: ScrollDirection;\n\n  viewportSize: Size;\n\n  viewportScroll: Positions;\n\n  readonly measureChildren?: boolean | ((e: Element, i: unknown) => ItemBox);\n\n  readonly listenForChildLoadEvents?: boolean;\n\n  updateItemSizes?: (sizes: {\n    [key: number]: ItemBox\n  }) => void;\n\n  addEventListener: Function;\n\n  removeEventListener: Function;\n\n  scrollToIndex: (index: number, position: string) => void;\n\n  /**\n   * Called by a VirtualRepeater or VirtualScroller when an update that\n   * potentially affects layout has occurred. For example, a viewport size\n   * change.\n   *\n   * The layout is in turn responsible for dispatching events, as necessary,\n   * to the VirtualRepeater or VirtualScroller. Each of the following events\n   * represents an update that should be determined during a reflow. Dispatch\n   * each event at maximum once during a single reflow.\n   *\n   * Events that should be dispatched:\n   * - scrollsizechange\n   *     Dispatch when the total length of all items in the scrolling direction,\n   *     including spacing, changes.\n   *     detail: {\n   *       'height' | 'width': number\n   *     }\n   * - rangechange\n   *     Dispatch when the range of children that should be displayed changes\n   *     (based on layout calculations and the size of the container) or when\n   *     the first or last item to intersect the container changes.\n   *     detail: {\n   *       first: number,\n   *       last: number,\n   *       num: number,\n   *       stable: boolean,\n   *       remeasure: boolean,\n   *       firstVisible: number,\n   *       lastVisible: number,\n   *     }\n   * - itempositionchange\n   *     Dispatch when the child positions change, for example due to a range\n   *     change.\n   *     detail {\n   *       [number]: {\n   *         left: number,\n   *         top: number\n   *       }\n   *     }\n   * - scrollerrorchange\n   *     Dispatch when the set viewportScroll offset is not what it should be.\n   *     detail {\n   *       height: number,\n   *       width: number,\n   *     }\n   */\n  reflowIfNeeded: (force: boolean) => void;\n}"]}